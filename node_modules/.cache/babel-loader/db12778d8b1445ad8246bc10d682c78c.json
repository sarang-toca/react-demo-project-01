{"ast":null,"code":"var _jsxFileName = \"/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/auth/Register.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import { connect } from \"react-redux\";\n// import { Link, Redirect  } from \"react-router-dom\";\n// import { register } from \"../../actions/auth\";\n// import PropTypes from \"prop-types\";\n// import Alert from \"../layout/Alert\";\n// const Register = ({ register, isAuthenticated }) => {\n// \tconst [error, setError] = useState(null);\n// \t// const history = useHistory();\n// \t// const historyToContacts = () => {\n// \t//   // 👇️ navigate to /contacts\n// \t//   history.push('/login');\n// \t// };\n// \tconst [formData, setFormData] = useState({\n// \t\tname: \"\",\n// \t\temail: \"\",\n// \t\tpassword: \"\",\n// \t});\n// \tconst validateEmail = (email) => {\n// \t\tconst re =\n// \t\t  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n// \t\treturn re.test(String(email).toLowerCase());\n// \t  };\n// \tconst { name, email, password} = formData;\n// \tconst onChange = (e) =>\n// \t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\n// \tconst onSubmit = async (e) => {\n// \t\tconsole.log(\"Form data\", e);\n// \t\te.preventDefault();\n// \t\tif (formData.name.length < 12) {\n// \t\t\tsetError('Name  must be at least 12 chars long');\n// \t\t  }\n// \t\tif (!validateEmail(formData.email)) {\n// \t\t\tsetError('Invalid Email');\n// \t\t  }\n// \t\t  if (formData.password.length < 8) {\n// \t\t\tsetError('Password must be at least 8 chars long');\n// \t\t  }\n// \t\t  if (!error) {\n// \t\t\t// No errors.\n// \t\t  }\n// \t\t\tregister({ name, email, password });\n// \t};\n// \t// Redirect if logged in\n// \t if (isAuthenticated) {\n// \t \treturn <Redirect to=\"/login\" />;\n// \t }\n// \treturn (\n// \t\t<div className=\"register-form\">\n// \t\t\t<h1 className=\"heading\">Sign Up</h1>\n// \t\t\t<p className=\"lead\">\n// \t\t\t\t<i className=\"fas fa-user\"></i> Create Your Account\n// \t\t\t</p>\n// \t\t\t<Alert />\n// \t\t\t<br />\n// \t\t\t{error && <div style={{ color: 'red' }}>{error}</div>}\n// \t\t\t<form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n// \t\t\t\t<div className=\"form-group\">\n// \t\t\t\t\t<input\n// \t\t\t\t\t\ttype=\"text\"\n// \t\t\t\t\t\tplaceholder=\"Name\"\n// \t\t\t\t\t\tname=\"name\"\n// \t\t\t\t\t\tvalue={name}\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\n// \t\t\t\t\t/>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"form-group\">\n// \t\t\t\t\t<input\n// \t\t\t\t\t\ttype=\"email\"\n// \t\t\t\t\t\tplaceholder=\"Email Address\"\n// \t\t\t\t\t\tname=\"email\"\n// \t\t\t\t\t\tvalue={email}\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\n// \t\t\t\t\t/>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"form-group\">\n// \t\t\t\t\t<input\n// \t\t\t\t\t\ttype=\"password\"\n// \t\t\t\t\t\tplaceholder=\"Password\"\n// \t\t\t\t\t\tname=\"password\"\n// \t\t\t\t\t\tminLength=\"6\"\n// \t\t\t\t\t\tvalue={password}\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\n// \t\t\t\t\t/>\n// \t\t\t\t</div>\n// \t\t\t\t<input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n// \t\t\t</form>\n// \t\t\t<p className=\"link\">\n// \t\t\t\tAlready have an account? <Link to=\"/login\">Sign In</Link>\n// \t\t\t</p>\n// \t\t</div>\n// \t);\n// };\n// Register.propTypes = {\n// \tsetAlert: PropTypes.func.isRequired,\n// \tregister: PropTypes.func.isRequired,\n// \tisAuthenticated: PropTypes.bool,\n// };\n// const mapStateToProps = (state) => ({\n// \tisAuthenticated: state.auth.isAuthenticated,\n// });\n// export default connect(mapStateToProps, {  register})(Register);\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { register } from '../../actions/auth';\n// import { withRouter } from 'react-router-dom';\n// class Register extends Component {\n//   // pretty standard\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n// \t\tname: '',\n//       email: '',\n//       password: ''\n//     };\n//     this.onChange = this.onChange.bind(this);\n//     this.onSubmit = this.onSubmit.bind(this);\n//   }\n//   onChange(e) {\n//     // change a key in state with whatever the name attribute is\n//     // either username or password\n//     this.setState({ [e.target.name]: e.target.value });\n//   }\n//   onSubmit(e) {\n//     e.preventDefault();\n//     // make sure we use an arrow function here to correctly bind this to this.props.history.push\n//     this.props.register(this.state).then(\n//       () => {\n//         // route to /login once signup is complete\n//         this.props.history.push('/login');\n//       },\n//       // if we get back a status code of >= 400 from the server...\n//     //   err => {\n//     //     // not for production - but good for testing for now!\n//     //     debugger;\n//     //   }\n//     );\n//   }\n//   render() {\n//     return (\n//       <div className=\"row\">\n//         <div className=\"col-md-4 col-md-offset-4\">\n//           <form onSubmit={this.onSubmit}>\n//             <h1>Sign up!</h1>\n// \t\t\t<div className=\"form-group\">\n//               <label htmlFor=\"username\">Name</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"name\"\n//                 name=\"name\"\n//                 value={this.state.name}\n//                 onChange={this.onChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"username\">Email</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"email\"\n//                 name=\"email\"\n//                 value={this.state.email}\n//                 onChange={this.onChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"password\">password</label>\n//               <input\n//                 type=\"password\"\n//                 id=\"password\"\n//                 name=\"password\"\n//                 value={this.state.password}\n//                 onChange={this.onChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <button className=\"btn btn-primary btn-lg\">Sign up</button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// // let's start adding propTypes - it's a best practice\n// Register.propTypes = {\n// \tregister: PropTypes.func.isRequired,\n// \thistory: PropTypes.func.isRequired,\n// };\n// export default withRouter(connect(null, { register })(Register));\n// import React, { Component } from 'react';\n// import {Link} from 'react-router-dom';\n// import { connect } from 'react-redux';\n//  import PropTypes from \"prop-types\";\n// // import { userActions } from '../../actions';\n// import { signUp } from \"../../actions/authActions\";\n// class Register extends Component {\n//     constructor(props) {\n// \t\tsuper(props);\n// \t\tthis.state = {\n//       \t\tname: '',\n// \t\t\temail: '',\n// \t\t\tpassword: '',\n// \t\t\tsubmitted : false\n// \t\t};\n// \t\tthis.handleInputChange = this.handleInputChange.bind(this);\n// \t\tthis.submitRegister = this.submitRegister.bind(this);\n// \t}\n// \thandleInputChange(e) {\n// \t\tconst name = e.target.name;\n// \t\tconst value = e.target.value;\n// \t\tthis.setState({\n// \t\t\t[name]: value\n// \t\t});\n// \t}\n// \tsubmitRegister(e) {\n// \t\te.preventDefault();\n// \t\tthis.setState({ submitted: true });\n// \t\tconst { name, email, password } = this.state;\n// \t\tif (email && password) {\n// \t\t\tthis.props.signUp({name, email, password});\n// \t\t}\n// \t}\n// \trender(){\n// \t\t//  const { registering  } = this.props;\n//         const { name, email, password, submitted } = this.state;\n// \t\treturn(\n// \t\t\t<div className=\"col-md-4 col-md-offset-4\">\n// \t\t\t<h2 className=\"text-center\">User Registration</h2><form>\n// \t\t\t<div className={'form-group' + (submitted && !name ? ' has-error' : '')}>\n// \t\t\t\t\t<label>Name:</label>\n// \t\t\t\t\t<input type=\"text\" id=\"name\" className=\"form-control input-shadow\" placeholder=\"Enter Name\" value={this.state.name} onChange={this.handleInputChange} name=\"name\"/>\n// \t\t\t \t\t\t\t\t\t\t\t { submitted && !name && <div className=\"help-block\">First Name is required</div> }\n// \t\t\t</div>\n// \t\t\t<div className={'form-group' + (submitted && !email ? ' has-error' : '')}>\n// \t\t\t\t\t<label>Email:</label>\n// \t\t\t\t\t<input type=\"text\" id=\"email\" className=\"form-control input-shadow\" placeholder=\"Enter Email\" value={this.state.email} onChange={this.handleInputChange} name=\"email\"/>\n// \t\t\t\t\t\t\t\t\t\t\t{ submitted && !email && <div className=\"help-block\">Email is required</div> }\n// \t\t\t</div>\n// \t\t\t<div className={'form-group' + (submitted && !password ? ' has-error' : '')}>\n// \t\t\t\t\t<label htmlFor=\"password\">Password: </label>\n// \t\t\t\t\t<input type=\"password\" id=\"password\" className=\"form-control input-shadow\" placeholder=\"Enter Password\" value={this.state.password}\n// \t\t\t\t\tonChange={this.handleInputChange} name=\"password\"/>\n// \t\t\t\t\t{ submitted && !name && <div className=\"help-block\">Password is required</div> }\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<button type=\"button\" onClick={this.submitRegister} className=\"btn btn-primary btn-block\">Register</button>\n// \t\t\t<Link to=\"/login\" className=\"btn btn-link\">Login</Link>\n// \t\t </form></div>\n// \t\t)\n// \t}\n// }\n// Register.propTypes = {\n// \tsignUp: PropTypes.object.isRequired,\n// \t// location: PropTypes.object.isRequired,\n// \t//  \tisAuthenticated: PropTypes.bool.isRequired,\n// \t//  location: PropTypes.object.isRequired\n// \t };\n// // function mapState(state) {\n// //     // const { registering } = state.register;\n// //     // return { registering };\n// // }\n// // const actionCreators = {\n// //     register: signUp.register\n// // }\n// const connectedRegister = connect(signUp)(Register);\n// export { connectedRegister as Register };\nimport React, { useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Link, useHistory, Redirect } from \"react-router-dom\"; // import { register } from \"../../actions/auth\";\n\nimport { signUp } from \"../../actions/authActions\";\nimport PropTypes from \"prop-types\";\nimport { setAlert } from \"../../actions/alert\"; // import Alert from \"../layout/Alert\";\n// import { setAlert } from \"../../actions/alert\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = _ref => {\n  _s();\n\n  let {\n    setAlert,\n    signUp,\n    isLoggedIn\n  } = _ref;\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\"\n  });\n  const {\n    name,\n    email,\n    password\n  } = formData;\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    console.log(\"Form data\", e);\n    e.preventDefault();\n    dispatch(signUp(formData, history));\n    signUp({\n      name,\n      email,\n      password\n    });\n  }; // Redirect if logged in\n\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lead\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 5\n      }, this), \" Create Your Account\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => onSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          name: \"name\",\n          value: name,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email Address\",\n          name: \"email\",\n          value: email,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          name: \"password\",\n          minLength: \"6\",\n          value: password,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        value: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"link\",\n      children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Register, \"blZTgOH+G/jm5nO+gvMHz6/RPrc=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = Register;\nRegister.propTypes = {\n  // setAlert: PropTypes.func.isRequired,\n  signUp: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  signUp\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/auth/Register.js"],"names":["React","useState","connect","useDispatch","Link","useHistory","Redirect","signUp","PropTypes","setAlert","Register","isLoggedIn","formData","setFormData","name","email","password","history","dispatch","onChange","e","target","value","onSubmit","console","log","preventDefault","propTypes","func","isRequired","bool","mapStateToProps","state","isAuthenticated","auth"],"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","sourcesContent":["// import React, { useState } from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import { Link, Redirect  } from \"react-router-dom\";\r\n// import { register } from \"../../actions/auth\";\r\n// import PropTypes from \"prop-types\";\r\n// import Alert from \"../layout/Alert\";\r\n\r\n// const Register = ({ register, isAuthenticated }) => {\r\n// \tconst [error, setError] = useState(null);\r\n\r\n// \t// const history = useHistory();\r\n\r\n// \t// const historyToContacts = () => {\r\n// \t//   // 👇️ navigate to /contacts\r\n// \t//   history.push('/login');\r\n// \t// };\r\n// \tconst [formData, setFormData] = useState({\r\n// \t\tname: \"\",\r\n// \t\temail: \"\",\r\n// \t\tpassword: \"\",\r\n\t\t\r\n// \t});\r\n// \tconst validateEmail = (email) => {\r\n// \t\tconst re =\r\n// \t\t  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n// \t\treturn re.test(String(email).toLowerCase());\r\n// \t  };\r\n\r\n// \tconst { name, email, password} = formData;\r\n\r\n// \tconst onChange = (e) =>\r\n// \t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n// \tconst onSubmit = async (e) => {\r\n// \t\tconsole.log(\"Form data\", e);\r\n// \t\te.preventDefault();\r\n\r\n// \t\tif (formData.name.length < 12) {\r\n// \t\t\tsetError('Name  must be at least 12 chars long');\r\n// \t\t  }\r\n\t  \r\n// \t\tif (!validateEmail(formData.email)) {\r\n// \t\t\tsetError('Invalid Email');\r\n// \t\t  }\r\n\t  \r\n// \t\t  if (formData.password.length < 8) {\r\n// \t\t\tsetError('Password must be at least 8 chars long');\r\n// \t\t  }\r\n\t  \r\n// \t\t  if (!error) {\r\n// \t\t\t// No errors.\r\n// \t\t  }\r\n// \t\t\tregister({ name, email, password });\r\n\t\t\r\n// \t};\r\n\r\n// \t// Redirect if logged in\r\n// \t if (isAuthenticated) {\r\n// \t \treturn <Redirect to=\"/login\" />;\r\n// \t }\r\n\t\r\n\r\n// \treturn (\r\n// \t\t<div className=\"register-form\">\r\n// \t\t\t<h1 className=\"heading\">Sign Up</h1>\r\n// \t\t\t<p className=\"lead\">\r\n// \t\t\t\t<i className=\"fas fa-user\"></i> Create Your Account\r\n// \t\t\t</p>\r\n// \t\t\t<Alert />\r\n// \t\t\t<br />\r\n// \t\t\t{error && <div style={{ color: 'red' }}>{error}</div>}\r\n// \t\t\t<form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n// \t\t\t\t<div className=\"form-group\">\r\n// \t\t\t\t\t<input\r\n// \t\t\t\t\t\ttype=\"text\"\r\n// \t\t\t\t\t\tplaceholder=\"Name\"\r\n// \t\t\t\t\t\tname=\"name\"\r\n// \t\t\t\t\t\tvalue={name}\r\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div className=\"form-group\">\r\n// \t\t\t\t\t<input\r\n// \t\t\t\t\t\ttype=\"email\"\r\n// \t\t\t\t\t\tplaceholder=\"Email Address\"\r\n// \t\t\t\t\t\tname=\"email\"\r\n// \t\t\t\t\t\tvalue={email}\r\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div className=\"form-group\">\r\n// \t\t\t\t\t<input\r\n// \t\t\t\t\t\ttype=\"password\"\r\n// \t\t\t\t\t\tplaceholder=\"Password\"\r\n// \t\t\t\t\t\tname=\"password\"\r\n// \t\t\t\t\t\tminLength=\"6\"\r\n// \t\t\t\t\t\tvalue={password}\r\n// \t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t</div>\r\n\t\t\t\t\r\n// \t\t\t\t<input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\r\n// \t\t\t</form>\r\n// \t\t\t<p className=\"link\">\r\n// \t\t\t\tAlready have an account? <Link to=\"/login\">Sign In</Link>\r\n// \t\t\t</p>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// Register.propTypes = {\r\n// \tsetAlert: PropTypes.func.isRequired,\r\n// \tregister: PropTypes.func.isRequired,\r\n// \tisAuthenticated: PropTypes.bool,\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n// \tisAuthenticated: state.auth.isAuthenticated,\r\n// });\r\n\r\n// export default connect(mapStateToProps, {  register})(Register);\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// import { register } from '../../actions/auth';\r\n// import { withRouter } from 'react-router-dom';\r\n\r\n// class Register extends Component {\r\n//   // pretty standard\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n// \t\tname: '',\r\n//       email: '',\r\n//       password: ''\r\n//     };\r\n\r\n//     this.onChange = this.onChange.bind(this);\r\n//     this.onSubmit = this.onSubmit.bind(this);\r\n//   }\r\n\r\n//   onChange(e) {\r\n//     // change a key in state with whatever the name attribute is\r\n//     // either username or password\r\n//     this.setState({ [e.target.name]: e.target.value });\r\n//   }\r\n\r\n//   onSubmit(e) {\r\n//     e.preventDefault();\r\n//     // make sure we use an arrow function here to correctly bind this to this.props.history.push\r\n//     this.props.register(this.state).then(\r\n//       () => {\r\n//         // route to /login once signup is complete\r\n//         this.props.history.push('/login');\r\n//       },\r\n//       // if we get back a status code of >= 400 from the server...\r\n//     //   err => {\r\n//     //     // not for production - but good for testing for now!\r\n//     //     debugger;\r\n//     //   }\r\n//     );\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"row\">\r\n//         <div className=\"col-md-4 col-md-offset-4\">\r\n//           <form onSubmit={this.onSubmit}>\r\n//             <h1>Sign up!</h1>\r\n// \t\t\t<div className=\"form-group\">\r\n//               <label htmlFor=\"username\">Name</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 id=\"name\"\r\n//                 name=\"name\"\r\n//                 value={this.state.name}\r\n//                 onChange={this.onChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label htmlFor=\"username\">Email</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 id=\"email\"\r\n//                 name=\"email\"\r\n//                 value={this.state.email}\r\n//                 onChange={this.onChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label htmlFor=\"password\">password</label>\r\n//               <input\r\n//                 type=\"password\"\r\n//                 id=\"password\"\r\n//                 name=\"password\"\r\n//                 value={this.state.password}\r\n//                 onChange={this.onChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <button className=\"btn btn-primary btn-lg\">Sign up</button>\r\n//             </div>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// // let's start adding propTypes - it's a best practice\r\n// Register.propTypes = {\r\n// \tregister: PropTypes.func.isRequired,\r\n// \thistory: PropTypes.func.isRequired,\r\n\r\n\t\r\n// };\r\n\r\n// export default withRouter(connect(null, { register })(Register));\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import {Link} from 'react-router-dom';\r\n// import { connect } from 'react-redux';\r\n//  import PropTypes from \"prop-types\";\r\n// // import { userActions } from '../../actions';\r\n// import { signUp } from \"../../actions/authActions\";\r\n// class Register extends Component {\r\n//     constructor(props) {\r\n// \t\tsuper(props);\r\n\r\n// \t\tthis.state = {\r\n//       \t\tname: '',\r\n// \t\t\temail: '',\r\n// \t\t\tpassword: '',\r\n// \t\t\tsubmitted : false\r\n// \t\t};\r\n// \t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n// \t\tthis.submitRegister = this.submitRegister.bind(this);\r\n\t\t\r\n// \t}\r\n\r\n// \thandleInputChange(e) {\r\n// \t\tconst name = e.target.name;\r\n// \t\tconst value = e.target.value;\r\n// \t\tthis.setState({\r\n// \t\t\t[name]: value\r\n// \t\t});\r\n// \t}\r\n\r\n// \tsubmitRegister(e) {\r\n// \t\te.preventDefault();\r\n// \t\tthis.setState({ submitted: true });\r\n// \t\tconst { name, email, password } = this.state;\r\n// \t\tif (email && password) {\r\n// \t\t\tthis.props.signUp({name, email, password});\r\n// \t\t}\r\n// \t}\r\n\r\n// \trender(){\r\n// \t\t//  const { registering  } = this.props;\r\n//         const { name, email, password, submitted } = this.state;\r\n// \t\treturn(\r\n\r\n// \t\t\t<div className=\"col-md-4 col-md-offset-4\">\r\n// \t\t\t<h2 className=\"text-center\">User Registration</h2><form>\r\n// \t\t\t<div className={'form-group' + (submitted && !name ? ' has-error' : '')}>\r\n// \t\t\t\t\t<label>Name:</label>\r\n// \t\t\t\t\t<input type=\"text\" id=\"name\" className=\"form-control input-shadow\" placeholder=\"Enter Name\" value={this.state.name} onChange={this.handleInputChange} name=\"name\"/>\r\n// \t\t\t \t\t\t\t\t\t\t\t { submitted && !name && <div className=\"help-block\">First Name is required</div> }\r\n// \t\t\t</div>\r\n// \t\t\t<div className={'form-group' + (submitted && !email ? ' has-error' : '')}>\r\n// \t\t\t\t\t<label>Email:</label>\r\n// \t\t\t\t\t<input type=\"text\" id=\"email\" className=\"form-control input-shadow\" placeholder=\"Enter Email\" value={this.state.email} onChange={this.handleInputChange} name=\"email\"/>\r\n// \t\t\t\t\t\t\t\t\t\t\t{ submitted && !email && <div className=\"help-block\">Email is required</div> }\r\n// \t\t\t</div>\r\n// \t\t\t<div className={'form-group' + (submitted && !password ? ' has-error' : '')}>\r\n// \t\t\t\t\t<label htmlFor=\"password\">Password: </label>\r\n// \t\t\t\t\t<input type=\"password\" id=\"password\" className=\"form-control input-shadow\" placeholder=\"Enter Password\" value={this.state.password}\r\n// \t\t\t\t\tonChange={this.handleInputChange} name=\"password\"/>\r\n// \t\t\t\t\t{ submitted && !name && <div className=\"help-block\">Password is required</div> }\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t\t<button type=\"button\" onClick={this.submitRegister} className=\"btn btn-primary btn-block\">Register</button>\r\n// \t\t\t<Link to=\"/login\" className=\"btn btn-link\">Login</Link>\r\n// \t\t </form></div>\r\n// \t\t)\r\n// \t}\r\n\r\n// }\r\n\r\n// Register.propTypes = {\r\n// \tsignUp: PropTypes.object.isRequired,\r\n// \t// location: PropTypes.object.isRequired,\r\n// \t//  \tisAuthenticated: PropTypes.bool.isRequired,\r\n// \t//  location: PropTypes.object.isRequired\r\n// \t };\r\n// // function mapState(state) {\r\n// //     // const { registering } = state.register;\r\n// //     // return { registering };\r\n// // }\r\n\r\n// // const actionCreators = {\r\n// //     register: signUp.register\r\n// // }\r\n\r\n// const connectedRegister = connect(signUp)(Register);\r\n// export { connectedRegister as Register };\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\n// import { register } from \"../../actions/auth\";\r\nimport { signUp } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { setAlert } from \"../../actions/alert\";\r\n\r\n// import Alert from \"../layout/Alert\";\r\n// import { setAlert } from \"../../actions/alert\";\r\n\r\nconst Register = ({setAlert,  signUp, isLoggedIn }) => {\r\n\tconst [formData, setFormData] = useState({\r\n\t\tname: \"\",\r\n\t\temail: \"\",\r\n\t\tpassword: \"\",\r\n\t});\r\n\r\n\tconst { name, email, password } = formData;\r\n\tconst history = useHistory();\r\n\tconst dispatch = useDispatch();\r\n\tconst onChange = (e) =>\r\n\t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\r\n\t\r\n\tconst onSubmit = async (e) => {\r\n\t\tconsole.log(\"Form data\", e);\r\n\t\te.preventDefault();\r\n\t\tdispatch(signUp(formData,history));\r\n\t\t\t signUp({ name, email, password });\r\n\t\t\r\n\t};\r\n\r\n\t// Redirect if logged in\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to=\"/login\" />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"register-form\">\r\n\t\t\t<h1 className=\"heading\">Sign Up</h1>\r\n\t\t\t<p className=\"lead\">\r\n\t\t\t\t<i className=\"fas fa-user\"></i> Create Your Account\r\n\t\t\t</p>\r\n\t\t\t<Alert />\r\n\t\t\t<br />\r\n\t\t\t<form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Name\"\r\n\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\tplaceholder=\"Email Address\"\r\n\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\tminLength=\"6\"\r\n\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<input type=\"submit\" className=\"btn btn-primary\" value=\"Register\"/>\r\n\t\t\t\t\r\n\t\t\t</form>\r\n\t\t\t<p className=\"link\">\r\n\t\t\t\tAlready have an account? <Link to=\"/login\">Sign In</Link>\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nRegister.propTypes = {\r\n\t// setAlert: PropTypes.func.isRequired,\r\n\tsignUp: PropTypes.func.isRequired,\r\n\tisLoggedIn: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {  signUp })(Register);"]},"metadata":{},"sourceType":"module"}