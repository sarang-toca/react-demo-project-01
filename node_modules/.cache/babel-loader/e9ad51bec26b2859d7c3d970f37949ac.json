{"ast":null,"code":"import api from \"services/api\"; // export function interceptor() {\n//   api.interceptors.request.use(\n//     config => {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//             config.headers.Authorization = 'Bearer ' + token;\n//         }\n//         config.headers['Content-Type'] = 'application/json';\n//         return config;\n//     },\n//     error => {\n//         Promise.reject(error)\n//   });\n// }\n\nexport function interceptor() {\n  const localToken = localStorage.getItem(\"token\");\n  api.interceptors.request.use(config => {\n    if (localToken) {\n      config.headers.Authorization = `JWT ${localToken}`;\n    }\n\n    return config;\n  });\n}","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/utils/interceptor.js"],"names":["api","interceptor","localToken","localStorage","getItem","interceptors","request","use","config","headers","Authorization"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAnB;AACAJ,EAAAA,GAAG,CAACK,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA8BC,MAAD,IAAY;AACvC,QAAIN,UAAJ,EAAgB;AACdM,MAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAAgC,OAAMR,UAAW,EAAjD;AACD;;AACD,WAAOM,MAAP;AACD,GALD;AAMD","sourcesContent":["import api from \"services/api\";\n\n// export function interceptor() {\n  \n//   api.interceptors.request.use(\n//     config => {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//             config.headers.Authorization = 'Bearer ' + token;\n//         }\n//         config.headers['Content-Type'] = 'application/json';\n//         return config;\n//     },\n//     error => {\n//         Promise.reject(error)\n//   });\n// }\n\n\nexport function interceptor() {\n  const localToken = localStorage.getItem(\"token\");\n  api.interceptors.request.use((config) => {\n    if (localToken) {\n      config.headers.Authorization = `JWT ${localToken}`;\n    }\n    return config;\n  });\n}\n\n"]},"metadata":{},"sourceType":"module"}