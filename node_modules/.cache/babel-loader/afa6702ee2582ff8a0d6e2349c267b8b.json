{"ast":null,"code":"import { getUsers, deleteUser, updateUser, getUser } from './actions';\nimport api from \"../services/api\"; /// add a new user\n// export const addUserAction = (user) => {\n//     return (dispatch) => {\n//         /// axios is a library used to make request to an API, \n//         /// return data and manipulate the data .\n//         axios.post('https://ti-react-test.herokuapp.com/users', user)\n//             .then(response => {\n//                 console.log(response);\n//                 dispatch(addUser(response.data))\n//             })\n//             .catch(error => {\n//                 console.log(\"eror\", error);\n//             });\n//     }\n// }\n/// fetch data of a single user  basedin id\n\nexport const getUserAction = id => {\n  return dispatch => {\n    api.get(`/v1/users/${id}`).then(response => {\n      console.log(response);\n      dispatch(getUser(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// fetch all users \n\nexport const getUsersAction = () => {\n  return dispatch => {\n    api.get('v1//users').then(response => {\n      console.log(response); /// dispatch function dispatches an action which triggers state changes in the store\n\n      dispatch(getUsers(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// delete a user\n\nexport const deleteUserAction = id => {\n  return dispatch => {\n    api.delete(`/v1/users/${id}`).then(response => {\n      console.log(response);\n      dispatch(deleteUser());\n      dispatch(getUsersAction());\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// update the existing data of a user\n\nexport const updateUserAction = (users, id) => {\n  return dispatch => {\n    api.patch(`/v1/users/${id}`, users).then(response => {\n      console.log(response);\n      dispatch(updateUser());\n      dispatch(getUsersAction());\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/actions/creators.js"],"names":["getUsers","deleteUser","updateUser","getUser","api","getUserAction","id","dispatch","get","then","response","console","log","data","catch","error","getUsersAction","deleteUserAction","delete","updateUserAction","users","patch"],"mappings":"AAAA,SAAUA,QAAV,EAAoBC,UAApB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA4D,WAA5D;AAEA,OAAOC,GAAP,MAAgB,iBAAhB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ;AACjC,SAAQC,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACI,GAAJ,CAAS,aAAYF,EAAG,EAAxB,EACKG,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACJ,OAAO,CAACO,QAAQ,CAACG,IAAV,CAAR,CAAR;AAEH,KALL,EAMKC,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM,C,CAcP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAQT,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACI,GAAJ,CAAQ,WAAR,EACKC,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADc,CAEd;;AACAH,MAAAA,QAAQ,CAACP,QAAQ,CAACU,QAAQ,CAACG,IAAV,CAAT,CAAR;AAGH,KAPL,EAQKC,KARL,CAQWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KAVL;AAWH,GAZD;AAaH,CAdM,C,CAgBP;;AACA,OAAO,MAAME,gBAAgB,GAAIX,EAAD,IAAQ;AACpC,SAAQC,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACc,MAAJ,CAAY,aAAYZ,EAAG,EAA3B,EACKG,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACN,UAAU,EAAX,CAAR;AACAM,MAAAA,QAAQ,CAACS,cAAc,EAAf,CAAR;AACH,KALL,EAMKF,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM,C,CAcP;;AACA,OAAO,MAAMI,gBAAgB,GAAG,CAACC,KAAD,EAAQd,EAAR,KAAe;AAC3C,SAAQC,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACiB,KAAJ,CAAW,aAAYf,EAAG,EAA1B,EAA6Bc,KAA7B,EACKX,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACAK,MAAAA,QAAQ,CAACS,cAAc,EAAf,CAAR;AACH,KALL,EAMKF,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM","sourcesContent":["import {  getUsers, deleteUser, updateUser, getUser  } from './actions';\n\nimport api from \"../services/api\";\n\n\n/// add a new user\n// export const addUserAction = (user) => {\n//     return (dispatch) => {\n//         /// axios is a library used to make request to an API, \n//         /// return data and manipulate the data .\n//         axios.post('https://ti-react-test.herokuapp.com/users', user)\n//             .then(response => {\n//                 console.log(response);\n//                 dispatch(addUser(response.data))\n//             })\n//             .catch(error => {\n//                 console.log(\"eror\", error);\n//             });\n//     }\n// }\n\n/// fetch data of a single user  basedin id\nexport const getUserAction = (id) => {\n    return (dispatch) => {\n        api.get(`/v1/users/${id}`)\n            .then(response => {\n                console.log(response);\n                dispatch(getUser(response.data)\n                );\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// fetch all users \nexport const getUsersAction = () => {\n    return (dispatch) => {\n        api.get('v1//users')\n            .then(response => {\n                console.log(response);\n                /// dispatch function dispatches an action which triggers state changes in the store\n                dispatch(getUsers(response.data)\n                );\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// delete a user\nexport const deleteUserAction = (id) => {\n    return (dispatch) => {\n        api.delete(`/v1/users/${id}`)\n            .then(response => {\n                console.log(response);\n                dispatch(deleteUser());\n                dispatch(getUsersAction());\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// update the existing data of a user\nexport const updateUserAction = (users, id) => {\n    return (dispatch) => {\n        api.patch(`/v1/users/${id}`, users)\n            .then(response => {\n                console.log(response);\n                dispatch(updateUser());\n                dispatch(getUsersAction());\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}