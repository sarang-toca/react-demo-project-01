{"ast":null,"code":"import { FETCH_USER_BEGIN, FETCH_USER_SUCCESS, FETCH_USER_FAILURE } from \"../actions/users\";\nconst initialState = {\n  user: {},\n  loading: false,\n  error: null\n};\nexport default function user() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_USER_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case FETCH_USER_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return { ...state,\n        loading: false,\n        user: action.user\n      };\n\n    case FETCH_USER_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return { ...state,\n        loading: false,\n        error: action.payload.error,\n        user: {}\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/reducers/fetch.js"],"names":["FETCH_USER_BEGIN","FETCH_USER_SUCCESS","FETCH_USER_FAILURE","initialState","user","loading","error","state","action","type","payload"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,kBAA1B,EAA8CC,kBAA9C,QAAuE,kBAAvE;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAME,eAAe,SAASF,IAAT,GAA4C;AAAA,MAA9BG,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACzD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKT,gBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,OAAO,EAAE,IAFJ;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAMF,SAAKL,kBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,OAAO,EAAE,KAFJ;AAGLD,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHR,OAAP;;AAMF,SAAKF,kBAAL;AACE;AACA;AACA;AACA;AACA;AACA,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAAP,CAAeJ,KAHjB;AAILF,QAAAA,IAAI,EAAE;AAJD,OAAP;;AAOF;AACE;AACA,aAAOG,KAAP;AAlCJ;AAoCD","sourcesContent":["import {FETCH_USER_BEGIN, FETCH_USER_SUCCESS, FETCH_USER_FAILURE} from \"../actions/users\";\n\n\n\nconst initialState = {\n    user: {},\n    loading: false,\n    error: null\n  };\n\n  export default function user(state = initialState, action) {\n    switch(action.type) {\n      case FETCH_USER_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n\n      case FETCH_USER_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          user: action.user\n        };\n\n      case FETCH_USER_FAILURE:\n        // The request failed, but it did stop, so set loading to \"false\".\n        // Save the error, and we can display it somewhere\n        // Since it failed, we don't have items to display anymore, so set it empty.\n        // This is up to you and your app though: maybe you want to keep the items\n        // around! Do whatever seems right.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          user: {}\n        };\n\n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}