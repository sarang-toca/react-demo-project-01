{"ast":null,"code":"var _jsxFileName = \"/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/Read.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import {\n//   makeStyles,\n//   useTheme,\n//   AppBar,\n//   Toolbar,\n//   Typography,\n//   Button,\n//   TableContainer,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogContentText,\n//   useMediaQuery,\n// } from \"@material-ui/core\";\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from \"@material-ui/icons\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { getUsersAction, deleteUserAction } from '../actions/creators';\n// import * as ReactBootstrap from 'react-bootstrap';\n// import ReactPaginate from 'react-paginate';\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     flexGrow: 1,\n//   },\n//   menuButton: {\n//     marginRight: theme.spacing(2),\n//   },\n//   title: {\n//     flexGrow: 1,\n//     textAlign: \"center\",\n//   },\n//   button: {\n//     margin: theme.spacing(1),\n//   },\n//   table: {\n//     flex: 1,\n//     alignContent: \"center\",\n//     justifyContent: \"center\",\n//   },\n// }));\n// function Read() {\n//       const [loading, setLoading] = useState(false);\n//       const [pageNumber, setPageNumber] = useState(0);\n//   const classes = useStyles();\n//   const theme = useTheme();\n//   const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n//   const dispatch = useDispatch();\n// //   const loading = useSelector((state) => state.users?.loading);\n//   const  users  = useSelector(state => state.users?.results);\n//   console.log(users)\n//   const [id, setId] = useState(\"\");\n//   const [open, setOpen] = useState(false);\n//   const usersPerPage = 7;\n//   const pagesVisited = pageNumber * usersPerPage;\n//   const pageCount = Math.ceil(users.length / usersPerPage);\n//   const changePage = ({ selected }) => {\n//       setPageNumber(selected);\n//   }\n//   useEffect(() => {\n//     dispatch(getUsersAction(), setLoading(true));\n//   }, []);\n//   useEffect(() => {\n//     console.log('loading', loading)\n//     if (!loading) {\n//       setOpen(loading);\n//     }\n//   }, [loading]);\n//   const openDialog = (id) => {\n//     setOpen(true);\n//     setId(id);\n//   };\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n//   const confirmDelete = () => {\n//     dispatch(deleteUserAction(id));\n//   };\n//   return (\n//     <React.Fragment>\n//       <AppBar position=\"static\">\n//         <Toolbar>\n//           <Typography variant=\"h6\" className={classes.title}>\n//             ReactJs CRUD App With React Redux Thunk\n//           </Typography>\n//         </Toolbar>\n//       </AppBar>\n//       <Link to=\"/create\">\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           className={classes.button}\n//           startIcon={<AddIcon />}\n//         >\n//           Create User\n//         </Button>\n//       </Link>\n//       <TableContainer component={Paper}>\n//         <Table className={classes.table} aria-label=\"simple table\">\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>S.No</TableCell>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Role</TableCell>\n//               <TableCell>Update</TableCell>\n//               <TableCell>Delete</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//           {loading ?\n//                                 users.slice(pagesVisited, pagesVisited + usersPerPage).filter( {\n//                                 }).map((user, index) => \n//               <TableRow key={index}>\n//                 <TableCell component=\"th\" scope=\"row\">\n//                   {index + 1}\n//                 </TableCell>\n//                 <TableCell>{user.name}</TableCell>\n//                 <TableCell>{user.email}</TableCell>\n//                 <TableCell>{user.role}</TableCell>\n//                 <TableCell>\n//                   <Link to={`/update/${user.id}`}>\n//                     <EditIcon>edit</EditIcon>\n//                   </Link>\n//                 </TableCell>\n//                 <TableCell>\n//                   <DeleteIcon onClick={() => openDialog(user.id)}>\n//                     delete\n//                   </DeleteIcon>\n//                 </TableCell>\n//               </TableRow>\n//            ) :\n//            <ReactBootstrap.Spinner animation=\"border\" variant=\"primary\" />\n//        }\n//           </TableBody>\n//         </Table>\n//         <ReactPaginate\n//                         previousLabel={\"Previous\"}\n//                         nextLabel={\"Next\"}\n//                         pageCount={pageCount}\n//                         onPageChange={changePage}\n//                         containerClassName={\"paginationBttns\"}\n//                         previousLinkClassName={\"previousBttns\"}\n//                         nextLinkClassName={\"nextBttn\"}\n//                         disabledClassName={\"paginationDisabled\"}\n//                         activeClassName={\"paginationActive\"}\n//                     />\n//       </TableContainer>\n//       {open && (\n//         <Dialog\n//           fullScreen={fullScreen}\n//           open={open}\n//           onClose={handleClose}\n//           aria-labelledby=\"Delete User\"\n//         >\n//           <DialogContent style={{ width: 300 }}>\n//             <DialogContentText>Are you sure?</DialogContentText>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button autoFocus onClick={handleClose} color=\"primary\">\n//               Cancel\n//             </Button>\n//             <Button onClick={confirmDelete}   href='/dashboard' color=\"primary\" autoFocus>\n//               Delete\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//   )\n//     }\n// export default Read;\nimport React, { useEffect, useState } from 'react';\nimport { Card, Table, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsersAction, deleteUserAction } from '../actions/creators';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport ReactPaginate from 'react-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Read = () => {\n  _s();\n\n  const dispatch = useDispatch(); // const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [loading, setLoading] = useState(false);\n  const [pageNumber, setPageNumber] = useState(0);\n  const users = useSelector(state => {\n    var _state$users;\n\n    return (_state$users = state.users) === null || _state$users === void 0 ? void 0 : _state$users.results;\n  });\n  const usersPerPage = 7;\n  const pagesVisited = pageNumber * usersPerPage;\n  const pageCount = Math.ceil(users.length / usersPerPage);\n\n  const changePage = _ref => {\n    let {\n      selected\n    } = _ref;\n    setPageNumber(selected);\n  };\n\n  const handleDelete = id => {\n    if (window.confirm(\"Are you sure You want to delete?\")) ;\n    dispatch(deleteUserAction(id));\n  };\n\n  useEffect(() => {\n    dispatch(getUsersAction(), setLoading(true));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"border border-dark bg-dark text-white\",\n        children: \" UserList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          type: \"button\",\n          to: '/create',\n          className: \"btn btn-primary \",\n          id: \"tab\",\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          variant: \"\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"border border-dark bg-dark text-white\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Role\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: loading ? users.slice(pagesVisited, pagesVisited + usersPerPage).filter(val => {\n              if (searchTerm === \"\") {\n                return val;\n              } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase()) || val.email.toLowerCase().includes(searchTerm.toLowerCase()) || val.role.toLowerCase().includes(searchTerm.toLowerCase())) {\n                return val;\n              }\n\n              return false;\n            }).map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\" \", user.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"btn-group\",\n                  role: \"group\",\n                  \"aria-label\": \"Basic example\",\n                  children: [/*#__PURE__*/_jsxDEV(Link, {\n                    type: \"button\",\n                    to: '/update/' + user.id,\n                    className: \"btn btn-info\",\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => handleDelete(user.id),\n                    className: \"btn btn-danger\",\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 41\n              }, this)]\n            }, user.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(ReactBootstrap.Spinner, {\n              animation: \"border\",\n              variant: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n          previousLabel: \"Previous\",\n          nextLabel: \"Next\",\n          pageCount: pageCount,\n          onPageChange: changePage,\n          containerClassName: \"paginationBttns\",\n          previousLinkClassName: \"previousBttns\",\n          nextLinkClassName: \"nextBttn\",\n          disabledClassName: \"paginationDisabled\",\n          activeClassName: \"paginationActive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Read, \"0bb1FjIEjrdOITxOgWd9RjW3Tnw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Read;\nexport default Read;\n\nvar _c;\n\n$RefreshReg$(_c, \"Read\");","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/Read.jsx"],"names":["React","useEffect","useState","Card","Table","Button","Link","useDispatch","useSelector","getUsersAction","deleteUserAction","ReactBootstrap","ReactPaginate","Read","dispatch","loading","setLoading","pageNumber","setPageNumber","users","state","results","usersPerPage","pagesVisited","pageCount","Math","ceil","length","changePage","selected","handleDelete","id","window","confirm","slice","filter","val","searchTerm","name","toLowerCase","includes","email","role","map","user"],"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import {\r\n//   makeStyles,\r\n//   useTheme,\r\n//   AppBar,\r\n//   Toolbar,\r\n//   Typography,\r\n//   Button,\r\n//   TableContainer,\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow,\r\n//   Paper,\r\n//   Dialog,\r\n//   DialogActions,\r\n//   DialogContent,\r\n//   DialogContentText,\r\n//   useMediaQuery,\r\n// } from \"@material-ui/core\";\r\n// import {\r\n//   Add as AddIcon,\r\n//   Edit as EditIcon,\r\n//   Delete as DeleteIcon,\r\n// } from \"@material-ui/icons\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { getUsersAction, deleteUserAction } from '../actions/creators';\r\n// import * as ReactBootstrap from 'react-bootstrap';\r\n// import ReactPaginate from 'react-paginate';\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   menuButton: {\r\n//     marginRight: theme.spacing(2),\r\n//   },\r\n//   title: {\r\n//     flexGrow: 1,\r\n//     textAlign: \"center\",\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   table: {\r\n//     flex: 1,\r\n//     alignContent: \"center\",\r\n//     justifyContent: \"center\",\r\n//   },\r\n// }));\r\n\r\n// function Read() {\r\n   \r\n//       const [loading, setLoading] = useState(false);\r\n//       const [pageNumber, setPageNumber] = useState(0);\r\n//   const classes = useStyles();\r\n//   const theme = useTheme();\r\n//   const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n//   const dispatch = useDispatch();\r\n// //   const loading = useSelector((state) => state.users?.loading);\r\n//   const  users  = useSelector(state => state.users?.results);\r\n//   console.log(users)\r\n//   const [id, setId] = useState(\"\");\r\n//   const [open, setOpen] = useState(false);\r\n\r\n//   const usersPerPage = 7;\r\n//   const pagesVisited = pageNumber * usersPerPage;\r\n//   const pageCount = Math.ceil(users.length / usersPerPage);\r\n\r\n//   const changePage = ({ selected }) => {\r\n//       setPageNumber(selected);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     dispatch(getUsersAction(), setLoading(true));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     console.log('loading', loading)\r\n//     if (!loading) {\r\n//       setOpen(loading);\r\n//     }\r\n//   }, [loading]);\r\n\r\n//   const openDialog = (id) => {\r\n//     setOpen(true);\r\n//     setId(id);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   const confirmDelete = () => {\r\n      \r\n//     dispatch(deleteUserAction(id));\r\n//   };\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <AppBar position=\"static\">\r\n//         <Toolbar>\r\n//           <Typography variant=\"h6\" className={classes.title}>\r\n//             ReactJs CRUD App With React Redux Thunk\r\n//           </Typography>\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//       <Link to=\"/create\">\r\n//         <Button\r\n//           variant=\"contained\"\r\n//           color=\"primary\"\r\n//           className={classes.button}\r\n//           startIcon={<AddIcon />}\r\n//         >\r\n//           Create User\r\n//         </Button>\r\n//       </Link>\r\n//       <TableContainer component={Paper}>\r\n//         <Table className={classes.table} aria-label=\"simple table\">\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell>S.No</TableCell>\r\n//               <TableCell>Name</TableCell>\r\n//               <TableCell>Email</TableCell>\r\n//               <TableCell>Role</TableCell>\r\n//               <TableCell>Update</TableCell>\r\n//               <TableCell>Delete</TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//           {loading ?\r\n//                                 users.slice(pagesVisited, pagesVisited + usersPerPage).filter( {\r\n                                  \r\n//                                 }).map((user, index) => \r\n//               <TableRow key={index}>\r\n//                 <TableCell component=\"th\" scope=\"row\">\r\n//                   {index + 1}\r\n//                 </TableCell>\r\n//                 <TableCell>{user.name}</TableCell>\r\n//                 <TableCell>{user.email}</TableCell>\r\n//                 <TableCell>{user.role}</TableCell>\r\n//                 <TableCell>\r\n//                   <Link to={`/update/${user.id}`}>\r\n//                     <EditIcon>edit</EditIcon>\r\n//                   </Link>\r\n//                 </TableCell>\r\n//                 <TableCell>\r\n//                   <DeleteIcon onClick={() => openDialog(user.id)}>\r\n//                     delete\r\n//                   </DeleteIcon>\r\n//                 </TableCell>\r\n//               </TableRow>\r\n//            ) :\r\n//            <ReactBootstrap.Spinner animation=\"border\" variant=\"primary\" />\r\n//        }\r\n//           </TableBody>\r\n//         </Table>\r\n//         <ReactPaginate\r\n//                         previousLabel={\"Previous\"}\r\n//                         nextLabel={\"Next\"}\r\n//                         pageCount={pageCount}\r\n//                         onPageChange={changePage}\r\n//                         containerClassName={\"paginationBttns\"}\r\n//                         previousLinkClassName={\"previousBttns\"}\r\n//                         nextLinkClassName={\"nextBttn\"}\r\n//                         disabledClassName={\"paginationDisabled\"}\r\n//                         activeClassName={\"paginationActive\"}\r\n\r\n//                     />\r\n//       </TableContainer>\r\n//       {open && (\r\n//         <Dialog\r\n//           fullScreen={fullScreen}\r\n//           open={open}\r\n//           onClose={handleClose}\r\n//           aria-labelledby=\"Delete User\"\r\n//         >\r\n//           <DialogContent style={{ width: 300 }}>\r\n//             <DialogContentText>Are you sure?</DialogContentText>\r\n//           </DialogContent>\r\n//           <DialogActions>\r\n//             <Button autoFocus onClick={handleClose} color=\"primary\">\r\n//               Cancel\r\n//             </Button>\r\n//             <Button onClick={confirmDelete}   href='/dashboard' color=\"primary\" autoFocus>\r\n//               Delete\r\n//             </Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       )}\r\n      \r\n//     </React.Fragment>\r\n      \r\n//   )\r\n\r\n//     }\r\n\r\n// export default Read;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Card, Table, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUsersAction, deleteUserAction } from '../actions/creators';\r\nimport * as ReactBootstrap from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\n\r\n\r\nconst Read = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n\r\n\r\n    const  users  = useSelector(state => state.users?.results);\r\n\r\n    const usersPerPage = 7;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(users.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        if (window.confirm(\"Are you sure You want to delete?\"));\r\n        dispatch(deleteUserAction(id));\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersAction(), setLoading(true));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\" >\r\n            <Card >\r\n                <Card.Header className={\"border border-dark bg-dark text-white\"}> UserList</Card.Header>\r\n                <Card.Body>\r\n                   \r\n                            <Link type=\"button\" to={'/create'} className=\"btn btn-primary \" id=\"tab\">Add User</Link>\r\n                     \r\n\r\n                    <Table variant=\"\" >\r\n                        <thead className={\"border border-dark bg-dark text-white\"}>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>Email</th>\r\n                                <th>Name</th>\r\n                                <th>Role</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {loading ?\r\n                                users.slice(pagesVisited, pagesVisited + usersPerPage).filter(val => {\r\n                                    if (searchTerm === \"\") {\r\n                                        return val;\r\n                                    } else if (\r\n                                        val.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                                        val.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                                        val.role.toLowerCase().includes(searchTerm.toLowerCase())\r\n                                    ) {\r\n                                        return val;\r\n                                    }\r\n                                    return false;\r\n                                }).map((user) =>\r\n                                    <tr key={user.id}>\r\n                                        <td>{user.id}</td>\r\n                                        <td> {user.email}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.role}</td>\r\n                                        <td>\r\n                                            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                                                <Link type=\"button\" to={'/update/' + user.id} className=\"btn btn-info\">Edit</Link>\r\n                                                {/* <Link type=\"button\" to={'/details/' + user.id} className=\"btn btn-warning\">Details</Link> */}\r\n                                                <Button type=\"button\" onClick={() => handleDelete(user.id)} className=\"btn btn-danger\">Delete</Button>\r\n\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                ) :\r\n                                <ReactBootstrap.Spinner animation=\"border\" variant=\"primary\" />\r\n                            }\r\n\r\n                        </tbody>\r\n\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={\"Previous\"}\r\n                        nextLabel={\"Next\"}\r\n                        pageCount={pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"paginationBttns\"}\r\n                        previousLinkClassName={\"previousBttns\"}\r\n                        nextLinkClassName={\"nextBttn\"}\r\n                        disabledClassName={\"paginationDisabled\"}\r\n                        activeClassName={\"paginationActive\"}\r\n\r\n                    />\r\n                </Card.Body>\r\n\r\n            </Card>\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nexport default Read;"]},"metadata":{},"sourceType":"module"}