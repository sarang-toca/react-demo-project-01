{"ast":null,"code":"var _jsxFileName = \"/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/Read.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from 'react';\n// import { Card, Table, Button } from 'react-bootstrap';\n// import { Link } from 'react-router-dom';\n// import { useDispatch, useSelector } from 'react-redux';\n//  import { getUsers, deleteUserById } from \"../actions/_user\";\n// import * as ReactBootstrap from 'react-bootstrap';\n// import ReactPaginate from 'react-paginate';\n// const Read = () => {\n//     const dispatch = useDispatch();\n//     const [searchTerm, setSearchTerm] = useState(\"\");\n//     const [loading, setLoading] = useState(false);\n//     const [pageNumber, setPageNumber] = useState(0);\n//     // const { users } = useSelector(state => state.user);\n//     const users = useSelector((state) => state.users?.results);\n//     const usersPerPage = 7;\n//     const pagesVisited = pageNumber * usersPerPage;\n//     const pageCount = Math.ceil(users.length / usersPerPage);\n//     const changePage = ({ selected }) => {\n//         setPageNumber(selected);\n//     }\n//     const handleDelete = (id) => {\n//         if (window.confirm(\"Are you sure You want to delete?\"));\n//         dispatch(deleteUserById(id));\n//     }\n//     useEffect(() => {\n//         dispatch(getUsers(), setLoading(true));\n//     }, []);\n//     return (\n//         <div className=\"container\" >\n//             <Card >\n//                 <Card.Header className={\"border border-dark bg-dark text-white\"}> UserList</Card.Header>\n//                 <Card.Body>\n//                     <span className=\"col-md-8\">\n//                         <span className=\"input-group mb-3 \">\n//                             <input\n//                                 type=\"text\"\n//                                 className=\"form-control \"\n//                                 placeholder=\"Search user\"\n//                                 onChange={(e) => {\n//                                     setSearchTerm(e.target.value);\n//                                 }}\n//                             />\n//                             <Link type=\"button\" to={'/create'} className=\"btn btn-primary \" id=\"tab\">Add User</Link>\n//                         </span>\n//                     </span>\n//                     <Table variant=\"\" >\n//                         <thead className={\"border border-dark bg-dark text-white\"}>\n//                             <tr>\n//                                 <th>id</th>\n//                                 <th>Email</th>\n//                                 <th>Name</th>\n//                                 <th>Role</th>\n//                                 <th>Action</th>\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             {loading ?\n//                                 users.slice(pagesVisited, pagesVisited + usersPerPage).filter(val => {\n//                                     if (searchTerm === \"\") {\n//                                         return val;\n//                                     } else if (\n//                                         val.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                                         val.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                                         val.role.toLowerCase().includes(searchTerm.toLowerCase())\n//                                     ) {\n//                                         return val;\n//                                     }\n//                                     return false;\n//                                 }).map((user) =>\n//                                     <tr key={user.id}>\n//                                         <td>{user.id}</td>\n//                                         <td> {user.email}</td>\n//                                         <td>{user.name}</td>\n//                                         <td>{user.role}</td>\n//                                         <td>\n//                                             <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n//                                                 <Link type=\"button\" to={'/update/' + user.id} className=\"btn btn-info\">Edit</Link>\n//                                                     {/* <Link type=\"button\" to={'/details/' + user.id} className=\"btn btn-warning\">Details</Link> */}\n//                                                 <Button type=\"button\" onClick={() => handleDelete(user.id)} className=\"btn btn-danger\">Delete</Button>\n//                                             </div>\n//                                         </td>\n//                                     </tr>\n//                                 ) :\n//                                 <ReactBootstrap.Spinner animation=\"border\" variant=\"primary\" />\n//                             }\n//                         </tbody>\n//                     </Table>\n//                     <ReactPaginate\n//                         previousLabel={\"Previous\"}\n//                         nextLabel={\"Next\"}\n//                         pageCount={pageCount}\n//                         onPageChange={changePage}\n//                         containerClassName={\"paginationBttns\"}\n//                         previousLinkClassName={\"previousBttns\"}\n//                         nextLinkClassName={\"nextBttn\"}\n//                         disabledClassName={\"paginationDisabled\"}\n//                         activeClassName={\"paginationActive\"}\n//                     />\n//                 </Card.Body>\n//             </Card>\n//         </div >\n//     );\n// }\n// export default Read;\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles, useTheme, AppBar, Toolbar, Typography, Button, TableContainer, Table, TableBody, TableCell, TableHead, TableRow, Paper, Dialog, DialogActions, DialogContent, DialogContentText, useMediaQuery } from \"@material-ui/core\";\nimport { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from \"@material-ui/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getUsersAction, deleteUserAction } from '../actions/creators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  table: {\n    flex: 1,\n    alignContent: \"center\",\n    justifyContent: \"center\"\n  }\n}));\n\nfunction Read() {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const dispatch = useDispatch();\n  const loading = useSelector(state => {\n    var _state$users;\n\n    return (_state$users = state.users) === null || _state$users === void 0 ? void 0 : _state$users.loading;\n  });\n  const users = useSelector(state => {\n    var _state$users2;\n\n    return (_state$users2 = state.users) === null || _state$users2 === void 0 ? void 0 : _state$users2.results;\n  });\n  console.log(users);\n  const [id, setId] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  useEffect(() => {\n    dispatch(getUsersAction());\n  }, []);\n  useEffect(() => {\n    console.log('loading', loading);\n\n    if (!loading) {\n      setOpen(loading);\n    }\n  }, [loading]);\n\n  const openDialog = id => {\n    setOpen(true);\n    setId(id); // dispatch(deleteUserAction(id));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const confirmDelete = () => {\n    dispatch(deleteUserAction(id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          className: classes.title,\n          children: \"ReactJs CRUD App With React Redux Thunk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/create\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 22\n        }, this),\n        children: \"Create User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"S.No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: users.map((user, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: user.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/update/${user.id}`,\n                children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                  children: \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                onClick: () => openDialog(user.id),\n                children: \"delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), open && /*#__PURE__*/_jsxDEV(Dialog, {\n      fullScreen: fullScreen,\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"Delete User\",\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          width: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          autoFocus: true,\n          onClick: handleClose,\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: confirmDelete,\n          color: \"primary\",\n          autoFocus: true,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Read, \"fm6Q61zaYWGIzPwXwpO99UQP+So=\", false, function () {\n  return [useStyles, useTheme, useMediaQuery, useDispatch, useSelector, useSelector];\n});\n\n_c = Read;\nexport default Read;\n\nvar _c;\n\n$RefreshReg$(_c, \"Read\");","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/Read.jsx"],"names":["React","useState","useEffect","Link","makeStyles","useTheme","AppBar","Toolbar","Typography","Button","TableContainer","Table","TableBody","TableCell","TableHead","TableRow","Paper","Dialog","DialogActions","DialogContent","DialogContentText","useMediaQuery","Add","AddIcon","Edit","EditIcon","Delete","DeleteIcon","useSelector","useDispatch","getUsersAction","deleteUserAction","useStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","button","margin","table","flex","alignContent","justifyContent","Read","classes","fullScreen","breakpoints","down","dispatch","loading","state","users","results","console","log","id","setId","open","setOpen","openDialog","handleClose","confirmDelete","map","user","index","name","email","role","width"],"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","sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// import { Card, Table, Button } from 'react-bootstrap';\r\n// import { Link } from 'react-router-dom';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n//  import { getUsers, deleteUserById } from \"../actions/_user\";\r\n// import * as ReactBootstrap from 'react-bootstrap';\r\n// import ReactPaginate from 'react-paginate';\r\n\r\n// const Read = () => {\r\n\r\n//     const dispatch = useDispatch();\r\n//     const [searchTerm, setSearchTerm] = useState(\"\");\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [pageNumber, setPageNumber] = useState(0);\r\n\r\n\r\n//     // const { users } = useSelector(state => state.user);\r\n//     const users = useSelector((state) => state.users?.results);\r\n//     const usersPerPage = 7;\r\n//     const pagesVisited = pageNumber * usersPerPage;\r\n//     const pageCount = Math.ceil(users.length / usersPerPage);\r\n\r\n//     const changePage = ({ selected }) => {\r\n//         setPageNumber(selected);\r\n//     }\r\n\r\n//     const handleDelete = (id) => {\r\n//         if (window.confirm(\"Are you sure You want to delete?\"));\r\n//         dispatch(deleteUserById(id));\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         dispatch(getUsers(), setLoading(true));\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div className=\"container\" >\r\n//             <Card >\r\n//                 <Card.Header className={\"border border-dark bg-dark text-white\"}> UserList</Card.Header>\r\n//                 <Card.Body>\r\n//                     <span className=\"col-md-8\">\r\n//                         <span className=\"input-group mb-3 \">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 className=\"form-control \"\r\n//                                 placeholder=\"Search user\"\r\n//                                 onChange={(e) => {\r\n//                                     setSearchTerm(e.target.value);\r\n//                                 }}\r\n//                             />\r\n//                             <Link type=\"button\" to={'/create'} className=\"btn btn-primary \" id=\"tab\">Add User</Link>\r\n//                         </span>\r\n//                     </span>\r\n\r\n//                     <Table variant=\"\" >\r\n//                         <thead className={\"border border-dark bg-dark text-white\"}>\r\n//                             <tr>\r\n//                                 <th>id</th>\r\n//                                 <th>Email</th>\r\n//                                 <th>Name</th>\r\n//                                 <th>Role</th>\r\n//                                 <th>Action</th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                             {loading ?\r\n//                                 users.slice(pagesVisited, pagesVisited + usersPerPage).filter(val => {\r\n//                                     if (searchTerm === \"\") {\r\n//                                         return val;\r\n//                                     } else if (\r\n//                                         val.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//                                         val.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//                                         val.role.toLowerCase().includes(searchTerm.toLowerCase())\r\n//                                     ) {\r\n//                                         return val;\r\n//                                     }\r\n//                                     return false;\r\n//                                 }).map((user) =>\r\n//                                     <tr key={user.id}>\r\n//                                         <td>{user.id}</td>\r\n//                                         <td> {user.email}</td>\r\n//                                         <td>{user.name}</td>\r\n//                                         <td>{user.role}</td>\r\n                                     \r\n\r\n//                                         <td>\r\n//                                             <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n//                                                 <Link type=\"button\" to={'/update/' + user.id} className=\"btn btn-info\">Edit</Link>\r\n//                                                     {/* <Link type=\"button\" to={'/details/' + user.id} className=\"btn btn-warning\">Details</Link> */}\r\n//                                                 <Button type=\"button\" onClick={() => handleDelete(user.id)} className=\"btn btn-danger\">Delete</Button>\r\n\r\n//                                             </div>\r\n//                                         </td>\r\n//                                     </tr>\r\n\r\n//                                 ) :\r\n//                                 <ReactBootstrap.Spinner animation=\"border\" variant=\"primary\" />\r\n//                             }\r\n\r\n//                         </tbody>\r\n\r\n//                     </Table>\r\n//                     <ReactPaginate\r\n//                         previousLabel={\"Previous\"}\r\n//                         nextLabel={\"Next\"}\r\n//                         pageCount={pageCount}\r\n//                         onPageChange={changePage}\r\n//                         containerClassName={\"paginationBttns\"}\r\n//                         previousLinkClassName={\"previousBttns\"}\r\n//                         nextLinkClassName={\"nextBttn\"}\r\n//                         disabledClassName={\"paginationDisabled\"}\r\n//                         activeClassName={\"paginationActive\"}\r\n\r\n//                     />\r\n//                 </Card.Body>\r\n\r\n//             </Card>\r\n//         </div >\r\n\r\n//     );\r\n// }\r\n\r\n// export default Read;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  useTheme,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getUsersAction, deleteUserAction } from '../actions/creators';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  table: {\r\n    flex: 1,\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Read() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.users?.loading);\r\n  const  users  = useSelector(state => state.users?.results);\r\n  console.log(users)\r\n  const [id, setId] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsersAction());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('loading', loading)\r\n    if (!loading) {\r\n      setOpen(loading);\r\n    }\r\n  }, [loading]);\r\n\r\n  const openDialog = (id) => {\r\n    setOpen(true);\r\n    setId(id);\r\n    // dispatch(deleteUserAction(id));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const confirmDelete = () => {\r\n    dispatch(deleteUserAction(id));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            ReactJs CRUD App With React Redux Thunk\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Link to=\"/create\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          startIcon={<AddIcon />}\r\n        >\r\n          Create User\r\n        </Button>\r\n      </Link>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>S.No</TableCell>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Email</TableCell>\r\n              <TableCell>Role</TableCell>\r\n              <TableCell>Update</TableCell>\r\n              <TableCell>Delete</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {users.map((user, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell>{user.name}</TableCell>\r\n                <TableCell>{user.email}</TableCell>\r\n                <TableCell>{user.role}</TableCell>\r\n                <TableCell>\r\n                  <Link to={`/update/${user.id}`}>\r\n                    <EditIcon>edit</EditIcon>\r\n                  </Link>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <DeleteIcon onClick={() => openDialog(user.id)}>\r\n                    delete\r\n                  </DeleteIcon>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      {open && (\r\n        <Dialog\r\n          fullScreen={fullScreen}\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"Delete User\"\r\n        >\r\n          <DialogContent style={{ width: 300 }}>\r\n            <DialogContentText>Are you sure?</DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={confirmDelete} color=\"primary\" autoFocus>\r\n              Delete\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Read;"]},"metadata":{},"sourceType":"module"}