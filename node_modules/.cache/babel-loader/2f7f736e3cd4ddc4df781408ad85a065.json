{"ast":null,"code":"import { addUser, getUser, getUsers, deleteUser, updateUser } from './actions';\nimport api from \"../services/api\"; /// add a new user\n\nexport const addUserAction = user => {\n  return dispatch => {\n    /// axios is a library used to make request to an API, \n    /// return data and manipulate the data .\n    api.post('/v1/users', user).then(response => {\n      console.log(response);\n      dispatch(addUser(response.data));\n    }).catch(error => {\n      console.log(\"eror\", error);\n    });\n  };\n}; /// fetch data of a single user  basedin id\n\nexport const getUserAction = id => {\n  return dispatch => {\n    api.get(`/v1/users/${id}`).then(response => {\n      console.log(response);\n      dispatch(getUser(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// fetch all users \n\nexport const getUsersAction = () => {\n  return dispatch => {\n    api.get('/v1/users').then(response => {\n      console.log(response); /// dispatch function dispatches an action which triggers state changes in the store\n\n      dispatch(getUsers(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// delete a user\n\nexport const deleteUserAction = id => {\n  return dispatch => {\n    api.delete(`/v1/users/${id}`).then(response => {\n      console.log(response);\n      dispatch(deleteUser());\n      dispatch(getUsersAction());\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; /// update the existing data of a user\n\nexport const updateUserAction = (user, id) => {\n  return dispatch => {\n    api.put(`/v1/users/${id}`, user).then(response => {\n      console.log(response);\n      dispatch(updateUser());\n      dispatch(getUsersAction());\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/actions/creators.js"],"names":["addUser","getUser","getUsers","deleteUser","updateUser","api","addUserAction","user","dispatch","post","then","response","console","log","data","catch","error","getUserAction","id","get","getUsersAction","deleteUserAction","delete","updateUserAction","put"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,UAAjD,QAAmE,WAAnE;AAEA,OAAOC,GAAP,MAAgB,iBAAhB,C,CAGA;;AACA,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAAU;AACnC,SAAQC,QAAD,IAAc;AACjB;AACA;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsBF,IAAtB,EACKG,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACR,OAAO,CAACW,QAAQ,CAACG,IAAV,CAAR,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,KAApB;AACH,KAPL;AAQH,GAXD;AAYH,CAbM,C,CAeP;;AACA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ;AACjC,SAAQV,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACc,GAAJ,CAAS,aAAYD,EAAG,EAAxB,EACKR,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACP,OAAO,CAACU,QAAQ,CAACG,IAAV,CAAR,CAAR;AAEH,KALL,EAMKC,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM,C,CAcP;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAChC,SAAQZ,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACc,GAAJ,CAAQ,WAAR,EACKT,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADc,CAEd;;AACAH,MAAAA,QAAQ,CAACN,QAAQ,CAACS,QAAQ,CAACG,IAAV,CAAT,CAAR;AAGH,KAPL,EAQKC,KARL,CAQWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KAVL;AAWH,GAZD;AAaH,CAdM,C,CAgBP;;AACA,OAAO,MAAMK,gBAAgB,GAAIH,EAAD,IAAQ;AACpC,SAAQV,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACiB,MAAJ,CAAY,aAAYJ,EAAG,EAA3B,EACKR,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACAK,MAAAA,QAAQ,CAACY,cAAc,EAAf,CAAR;AACH,KALL,EAMKL,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM,C,CAcP;;AACA,OAAO,MAAMO,gBAAgB,GAAG,CAAChB,IAAD,EAAOW,EAAP,KAAc;AAC1C,SAAQV,QAAD,IAAc;AACjBH,IAAAA,GAAG,CAACmB,GAAJ,CAAS,aAAYN,EAAG,EAAxB,EAA2BX,IAA3B,EACKG,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACAI,MAAAA,QAAQ,CAACY,cAAc,EAAf,CAAR;AACH,KALL,EAMKL,KANL,CAMWC,KAAK,IAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KARL;AASH,GAVD;AAWH,CAZM","sourcesContent":["import { addUser, getUser, getUsers, deleteUser, updateUser } from './actions';\n\nimport api from \"../services/api\";\n\n\n/// add a new user\nexport const addUserAction = (user) => {\n    return (dispatch) => {\n        /// axios is a library used to make request to an API, \n        /// return data and manipulate the data .\n        api.post('/v1/users', user)\n            .then(response => {\n                console.log(response);\n                dispatch(addUser(response.data))\n            })\n            .catch(error => {\n                console.log(\"eror\", error);\n            });\n    }\n}\n\n/// fetch data of a single user  basedin id\nexport const getUserAction = (id) => {\n    return (dispatch) => {\n        api.get(`/v1/users/${id}`)\n            .then(response => {\n                console.log(response);\n                dispatch(getUser(response.data)\n                );\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// fetch all users \nexport const getUsersAction = () => {\n    return (dispatch) => {\n        api.get('/v1/users')\n            .then(response => {\n                console.log(response);\n                /// dispatch function dispatches an action which triggers state changes in the store\n                dispatch(getUsers(response.data)\n                );\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// delete a user\nexport const deleteUserAction = (id) => {\n    return (dispatch) => {\n        api.delete(`/v1/users/${id}`)\n            .then(response => {\n                console.log(response);\n                dispatch(deleteUser());\n                dispatch(getUsersAction());\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\n/// update the existing data of a user\nexport const updateUserAction = (user, id) => {\n    return (dispatch) => {\n        api.put(`/v1/users/${id}`, user)\n            .then(response => {\n                console.log(response);\n                dispatch(updateUser());\n                dispatch(getUsersAction());\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}