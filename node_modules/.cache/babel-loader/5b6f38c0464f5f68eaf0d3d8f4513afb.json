{"ast":null,"code":"var _jsxFileName = \"/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/auth/Register.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { signUp } from \"../../actions/authActions\";\nimport PropTypes from \"prop-types\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = _ref => {\n  _s();\n\n  var _errors$name, _errors$email, _errors$password, _errors$acceptTerms;\n\n  let {\n    signUp,\n    isLoggedIn\n  } = _ref;\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email('Email is invalid'),\n    password: Yup.string().required('Password is required').min(6, 'Password must be at least 6 characters').max(8, 'Password must not exceed 40 characters'),\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n  }); //   const {\n  // \tformData,\n  // \thandleSubmit,\n  // \treset,\n  // \tformState: { errors }\n  //   } = useForm({\n  // \tresolver: yupResolver(validationSchema)\n  //   });\n\n  const {\n    formData,\n    setFormData,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  }); // const [validation, setValidation] = useState({\n  // \tname: \"\",\n  // \temail: \"\",\n  // \tpassword: \"\",\n  //   });\n\n  const {\n    name,\n    email,\n    password\n  } = formData;\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    console.log(\"Form data\", e);\n    e.preventDefault();\n    dispatch(signUp(formData, history)); //  signUp({ name, email, password });\n  }; // Redirect if logged in\n\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-form\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => onSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"name\",\n          type: \"text\",\n          value: formData.name,\n          className: `form-control ${errors.name ? 'is-invalid' : ''}`,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"text\",\n          value: name,\n          className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"password\",\n          type: \"password\",\n          ...formData('password'),\n          className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group form-check\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"acceptTerms\",\n          type: \"checkbox\",\n          ...formData('acceptTerms'),\n          className: `form-check-input ${errors.acceptTerms ? 'is-invalid' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"acceptTerms\",\n          className: \"form-check-label\",\n          children: \"I have read and agree to the Terms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$acceptTerms = errors.acceptTerms) === null || _errors$acceptTerms === void 0 ? void 0 : _errors$acceptTerms.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: reset,\n          className: \"btn btn-warning float-right\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this) // <div className=\"register-form\">\n  // \t<h1 className=\"heading\">Sign Up</h1>\n  // \t<p className=\"lead\">\n  // \t\t<i className=\"fas fa-user\"></i> Create Your Account\n  // \t</p>\n  // \t{/* <Alert /> */}\n  // \t<br />\n  // \t<form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n  // \t\t<div className=\"form-group\">\n  // \t\t\t<input\n  // \t\t\t\ttype=\"text\"\n  // \t\t\t\tplaceholder=\"Name\"\n  // \t\t\t\tname=\"name\"\n  // \t\t\t\tvalue={formData.name}\n  // \t\t\t\tonChange={(e) => onChange(e)}\n  // \t\t\t/>\n  // \t\t\t <div  className={`invalid-feedback ${validation.name ? 'is-invalid' : ''}`}>{validation.name}</div>\n  // \t\t\t  {/* {validation.name && <p>{validation.name}</p>} */}\n  // \t\t</div>\n  // \t\t<div className=\"form-group\">\n  // \t\t\t<input\n  // \t\t\t\ttype=\"email\"\n  // \t\t\t\tplaceholder=\"Email Address\"\n  // \t\t\t\tname=\"email\"\n  // \t\t\t\tvalue={formData.email}\n  // \t\t\t\tonChange={(e) => onChange(e)}\n  // \t\t\t/>\n  // \t\t\t {validation.email && <p>{validation.email}</p>}\n  // \t\t</div>\n  // \t\t<div className=\"form-group\">\n  // \t\t\t<input\n  // \t\t\t\ttype=\"password\"\n  // \t\t\t\tplaceholder=\"Password\"\n  // \t\t\t\tname=\"password\"\n  // \t\t\t\tminLength=\"6\"\n  // \t\t\t\tvalue={password}\n  // \t\t\t\tonChange={(e) => onChange(e)}\n  // \t\t\t/>\n  // \t\t</div>\n  // \t\t<button type=\"submit\" className=\"btn btn-primary\" href=\"/login\">Register</button>\n  // \t</form>\n  // \t<p className=\"link\">\n  // \t\tAlready have an account? <Link to=\"/login\">Sign In</Link>\n  // \t</p>\n  // </div>\n  ;\n};\n\n_s(Register, \"MSPUmNvNwYKdpKWewdx9eT7M6jg=\", false, function () {\n  return [useForm, useHistory, useDispatch];\n});\n\n_c = Register;\nRegister.propTypes = {\n  signUp: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.auth.isLoggedIn\n});\n\nexport default connect(mapStateToProps, {\n  signUp\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/tops/Reactjs Project/react-redux-sagas-boilerplate/src/components/auth/Register.js"],"names":["React","connect","useDispatch","useHistory","Redirect","signUp","PropTypes","useForm","yupResolver","Yup","Register","isLoggedIn","validationSchema","object","shape","name","string","required","email","password","min","max","acceptTerms","bool","oneOf","formData","setFormData","reset","formState","errors","resolver","history","dispatch","onChange","e","target","value","onSubmit","console","log","preventDefault","message","propTypes","func","isRequired","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { signUp } from \"../../actions/authActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Register = ({  signUp, isLoggedIn }) => {\r\n\r\n\tconst validationSchema = Yup.object().shape({\r\n\t\tname: Yup.string().required('Name is required'),\r\n\t\temail: Yup.string()\r\n\t\t  .required('Email is required')\r\n\t\t  .email('Email is invalid'),\r\n\t\tpassword: Yup.string()\r\n\t\t  .required('Password is required')\r\n\t\t  .min(6, 'Password must be at least 6 characters')\r\n\t\t  .max(8, 'Password must not exceed 40 characters'),\r\n\t\tacceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\r\n\t  });\r\n\r\n\t//   const {\r\n\t// \tformData,\r\n\t// \thandleSubmit,\r\n\t// \treset,\r\n\t// \tformState: { errors }\r\n\t//   } = useForm({\r\n\t// \tresolver: yupResolver(validationSchema)\r\n\t//   });\r\n\r\n\tconst {formData, setFormData,reset,formState: {errors}} = useForm({\r\n\t\t\t\r\n\t\tresolver: yupResolver(validationSchema)\r\n\t});\r\n\t// const [validation, setValidation] = useState({\r\n\t// \tname: \"\",\r\n\t// \temail: \"\",\r\n\t// \tpassword: \"\",\r\n\t//   });\r\n\r\n\r\n\t const { name, email, password } = formData;\r\n\tconst history = useHistory();\r\n\tconst dispatch = useDispatch();\r\n\tconst onChange = (e) =>\r\n\t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\r\n\t\r\n\tconst onSubmit = async (e) => {\r\n\t\tconsole.log(\"Form data\", e);\r\n\t\te.preventDefault();\r\n\t\r\n  \r\n\t\tdispatch(signUp(formData,history));\r\n\t\t\t//  signUp({ name, email, password });\r\n\t\t\t\r\n\t\t\t};\r\n\r\n\t// Redirect if logged in\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to=\"/login\" />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"register-form\">\r\n\t\t<form onSubmit={(e) => onSubmit(e)}>\r\n\t\t  <div className=\"form-group\">\r\n\t\t\t<label>Name</label>\r\n\t\t\t<input\r\n\t\t\t  name=\"name\"\r\n\t\t\t  type=\"text\"\r\n\t\t\t  value={formData.name}\r\n\t\t\t  className={`form-control ${errors.name ? 'is-invalid' : ''}`}\r\n\t\t\t  onChange={(e) => onChange(e)}\r\n\t\t\t/>\r\n\t\t\t<div className=\"invalid-feedback\">{errors.name?.message}</div>\r\n\t\t  </div>\r\n  \r\n\t\t  <div className=\"form-group\">\r\n\t\t\t<label>Email</label>\r\n\t\t\t<input\r\n\t\t\t  name=\"email\"\r\n\t\t\t  type=\"text\"\r\n\t\t\t value={name}\r\n\t\t\t  className={`form-control ${errors.email ? 'is-invalid' : ''}`}\r\n\t\t\t  onChange={(e) => onChange(e)}\r\n\t\t\t/>\r\n\t\t\t<div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n\t\t  </div>\r\n  \r\n\t\t  <div className=\"form-group\">\r\n\t\t\t<label>Password</label>\r\n\t\t\t<input\r\n\t\t\t  name=\"password\"\r\n\t\t\t  type=\"password\"\r\n\t\t\t  {...formData('password')}\r\n\t\t\t  className={`form-control ${errors.password ? 'is-invalid' : ''}`}\r\n\t\t\t  onChange={(e) => onChange(e)}\r\n\t\t\t/>\r\n\t\t\t<div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n\t\t  </div>\r\n  \r\n\t\t  <div className=\"form-group form-check\">\r\n\t\t\t<input\r\n\t\t\t  name=\"acceptTerms\"\r\n\t\t\t  type=\"checkbox\"\r\n\t\t\t  {...formData('acceptTerms')}\r\n\t\t\t  className={`form-check-input ${\r\n\t\t\t\terrors.acceptTerms ? 'is-invalid' : ''\r\n\t\t\t  }`}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor=\"acceptTerms\" className=\"form-check-label\">\r\n\t\t\t  I have read and agree to the Terms\r\n\t\t\t</label>\r\n\t\t\t<div className=\"invalid-feedback\">{errors.acceptTerms?.message}</div>\r\n\t\t  </div>\r\n  \r\n\t\t  <div className=\"form-group\">\r\n\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\r\n\t\t\t  Register\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t  type=\"button\"\r\n\t\t\t  onClick={reset}\r\n\t\t\t  className=\"btn btn-warning float-right\"\r\n\t\t\t>\r\n\t\t\t  Reset\r\n\t\t\t</button>\r\n\t\t  </div>\r\n\t\t</form>\r\n\t  </div>\r\n\t\t// <div className=\"register-form\">\r\n\t\t// \t<h1 className=\"heading\">Sign Up</h1>\r\n\t\t// \t<p className=\"lead\">\r\n\t\t// \t\t<i className=\"fas fa-user\"></i> Create Your Account\r\n\t\t// \t</p>\r\n\t\t// \t{/* <Alert /> */}\r\n\t\t// \t<br />\r\n\t\t// \t<form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n\t\t// \t\t<div className=\"form-group\">\r\n\t\t// \t\t\t<input\r\n\t\t\t\t\t\t\r\n\t\t// \t\t\t\ttype=\"text\"\r\n\t\t// \t\t\t\tplaceholder=\"Name\"\r\n\t\t// \t\t\t\tname=\"name\"\r\n\t\t// \t\t\t\tvalue={formData.name}\r\n\t\t// \t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t\t <div  className={`invalid-feedback ${validation.name ? 'is-invalid' : ''}`}>{validation.name}</div>\r\n\t\t// \t\t\t  {/* {validation.name && <p>{validation.name}</p>} */}\r\n\t\t// \t\t</div>\r\n\t\t// \t\t<div className=\"form-group\">\r\n\t\t// \t\t\t<input\r\n\t\t// \t\t\t\ttype=\"email\"\r\n\t\t// \t\t\t\tplaceholder=\"Email Address\"\r\n\t\t// \t\t\t\tname=\"email\"\r\n\t\t// \t\t\t\tvalue={formData.email}\r\n\t\t// \t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t\t {validation.email && <p>{validation.email}</p>}\r\n\t\t// \t\t</div>\r\n\t\t// \t\t<div className=\"form-group\">\r\n\t\t// \t\t\t<input\r\n\t\t// \t\t\t\ttype=\"password\"\r\n\t\t// \t\t\t\tplaceholder=\"Password\"\r\n\t\t// \t\t\t\tname=\"password\"\r\n\t\t// \t\t\t\tminLength=\"6\"\r\n\t\t// \t\t\t\tvalue={password}\r\n\t\t// \t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t// \t\t\t/>\r\n\t\t\t\t\t\r\n\t\t// \t\t</div>\r\n\t\t\t\t\r\n\t\t// \t\t<button type=\"submit\" className=\"btn btn-primary\" href=\"/login\">Register</button>\r\n\t\t\t\t\r\n\t\t// \t</form>\r\n\t\t// \t<p className=\"link\">\r\n\t\t// \t\tAlready have an account? <Link to=\"/login\">Sign In</Link>\r\n\t\t// \t</p>\r\n\t\t// </div>\r\n\t);\r\n};\r\n\r\nRegister.propTypes = {\r\n\tsignUp: PropTypes.func.isRequired,\r\n\tisLoggedIn: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisLoggedIn: state.auth.isLoggedIn,\r\n});\r\n\r\nexport default connect(mapStateToProps, {  signUp })(Register);"]},"metadata":{},"sourceType":"module"}